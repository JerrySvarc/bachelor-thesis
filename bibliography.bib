%
%  An example of a bibliographical database in BibTeX format,
%  which is used by biblatex to create the list of referenced works.
%
%  Academic search engines and software for maintenance of bibliography
%  often supports exporting records in BibTeX format. We recommend:
%
%    - Google Scholar (https://scholar.google.com/)
%    - JabRef (https://www.jabref.org/)
%    - zoterobib (https://zbib.org/)
%
%  BEWARE:
%
%    *  If a name contains a capital letter, which must be kept such,
%       use curly brackets ({T}hailand, {HIV}).
%
%  ===========================================================================
 @online{Nix,
  title = {Nix package manager},
  url = {https://nixos.org/},
  abstractNote = {Nix is a tool that takes a unique approach to package
                  management and system configuration. Learn how to make
                  reproducible, declarative and reliable systems.},
  urldate = {2025-01-01},
}

 @article{Pinho_Aguiar_Amaral_2023,
  title = {What about the usability in low-code platforms? A systematic
           literature review},
  volume = {74},
  issn = {25901184},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S259011842200082X},
  doi = {10.1016/j.cola.2022.101185},
  journal = {Journal of Computer Languages},
  author = {Pinho, Daniel and Aguiar, Ademar and Amaral, Vasco},
  year = {2023},
  month = jan,
  pages = {101185},
  language = {en},
}
 @inproceedings{sketch-and-sketch,
  address = {New Orleans LA USA},
  title = {Sketch-n-Sketch: Output-Directed Programming for SVG},
  isbn = {9781450368162},
  url = {https://dl.acm.org/doi/10.1145/3332165.3347925},
  doi = {10.1145/3332165.3347925},
  booktitle = {Proceedings of the 32nd Annual ACM Symposium on User Interface
               Software and Technology},
  publisher = {ACM},
  author = {Hempel, Brian and Lubin, Justin and Chugh, Ravi},
  year = {2019},
  month = oct,
  pages = {281–292},
  language = {en},
}
 @article{output-directed-programming,
  title = {Programmatic and direct manipulation, together at last},
  volume = {51},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/2980983.2908103},
  doi = {10.1145/2980983.2908103},
  abstractnote = {Direct manipulation interfaces and programmatic systems have
                  distinct and complementary strengths. The former provide
                  intuitive, immediate visual feedback and enable rapid
                  prototyping, whereas the latter enable complex, reusable
                  abstractions. Unfortunately, existing systems typically force
                  users into just one of these two interaction modes. We present
                  a system called Sketch-n-Sketch that integrates programmatic
                  and direct manipulation for the particular domain of Scalable
                  Vector Graphics (SVG). In Sketch-n-Sketch, the user writes a
                  program to generate an output SVG canvas. Then the user may
                  directly manipulate the canvas while the system immediately
                  infers a program update in order to match the changes to the
                  output, a workflow we call live synchronization. To achieve
                  this, we propose (i) a technique called trace-based program
                  synthesis that takes program execution history into account in
                  order to constrain the search space and (ii) heuristics for
                  dealing with ambiguities. Based on our experience with examples
                  spanning 2,000 lines of code and from the results of a
                  preliminary user study, we believe that Sketch-n-Sketch
                  provides a novel workflow that can augment traditional
                  programming systems. Our approach may serve as the basis for
                  live synchronization in other application domains, as well as a
                  starting point for yet more ambitious ways of combining
                  programmatic and direct manipulation.},
  number = {6},
  journal = {ACM SIGPLAN Notices},
  author = {Chugh, Ravi and Hempel, Brian and Spradlin, Mitchell and Albers,
            Jacob},
  year = {2016},
  month = jun,
  pages = {341–354},
}
 @book{Schreiber_Krahn_Ingalls_Hirschfeld_2017,
  address = {Potsdam},
  series = {Technische Berichte des Hasso-Plattner-Instituts für
            Softwaresystemtechnik an der Universität Potsdam},
  title = {Transmorphic: Mapping direct manipulation to source code
           transformations},
  ISBN = {9783869563879},
  publisher = {Universitätsverlag},
  author = {Schreiber, Robin and Krahn, Robert and Ingalls, Daniel H. H. and
            Hirschfeld, Robert},
  year = {2017},
  collection = {Technische Berichte des Hasso-Plattner-Instituts für
                Softwaresystemtechnik an der Universität Potsdam},
  language = {eng},
}

@article{html-direct,
  title = {Bidirectional evaluation with direct manipulation},
  volume = {2},
  issn = {2475-1421},
  url = {https://dl.acm.org/doi/10.1145/3276497},
  doi = {10.1145/3276497},
  abstractnote = {We present an evaluation update (or simply, update) algorithm
                  for a full-featured functional programming language, which
                  synthesizes program changes based on output changes.
                  Intuitively, the update algorithm retraces the steps of the
                  original evaluation, rewriting the program as needed to
                  reconcile differences between the original and updated output
                  values. Our approach, furthermore, allows expert users to
                  define custom lenses that augment the update algorithm with
                  more advanced or domain-specific program updates. To
                  demonstrate the utility of evaluation update, we implement the
                  algorithm in Sketch-n-Sketch, a novel direct manipulation
                  programming system for generating HTML documents. In
                  Sketch-n-Sketch, the user writes an ML-style functional program
                  to generate HTML output. When the user directly manipulates the
                  output using a graphical user interface, the update algorithm
                  reconciles the changes. We evaluate bidirectional evaluation in
                  Sketch-n-Sketch by authoring ten examples comprising
                  approximately 1400 lines of code in total. These examples
                  demonstrate how a variety of HTML documents and applications
                  can be developed and edited interactively in Sketch-n-Sketch,
                  mitigating the tedious edit-run-view cycle in traditional
                  programming environments.},
  number = {OOPSLA},
  journal = {Proceedings of the ACM on Programming Languages},
  author = {Mayer, Mikaël and Kuncak, Viktor and Chugh, Ravi},
  year = {2018},
  month = oct,
  pages = {1–28},
  language = {en},
}

 @online{hypercard_emulator,
  title = {HyperCard emulator},
  url = {http://archive.org/details/hypercard_guesswords1},
  abstractNote = {A HyperCard game stack that resembles the game of MasterMind,
                  except it uses five-letter words instead of colored pegs.},
  author = {Scot Bickell},
  year = {1993},
  month = mar,
  urldate = {2024-09-17},
}


 @book{goodman_hypertext,
  address = {Toronto ; New York},
  edition = {2nd ed},
  series = {The Macintosh performance library},
  title = {The complete HyperCard handbook},
  isbn = {9780553345773},
  callnumber = {QA76.8.M3 G645 1988},
  publisher = {Bantam Books},
  author = {Goodman, Danny},
  year = {1988},
  collection = {The Macintosh performance library},
}

 @misc{hyper_release,
  title = {Macworld Expo 1987 Boston},
  url = {http://32by32.com/macworld-expo-1987-boston/},
  journal = {32by32},
  author = {Leonard, Peter},
  year = {1987},
  month = aug,
  language = {English},
}
 @article{Czaplicki_Chong_2013,
  title = {Asynchronous functional reactive programming for GUIs},
  volume = {48},
  ISSN = {0362-1340, 1558-1160},
  url = {https://dl.acm.org/doi/10.1145/2499370.2462161},
  DOI = {10.1145/2499370.2462161},
  abstractNote = {Graphical user interfaces (GUIs) mediate many of our
                  interactions with computers. Functional Reactive Programming
                  (FRP) is a promising approach to GUI design, providing
                  high-level, declarative, compositional abstractions to describe
                  user interactions and time-dependent computations. We present
                  Elm, a practical FRP language focused on easy creation of
                  responsive GUIs. Elm has two major features: simple declarative
                  support for Asynchronous FRP ; and purely functional graphical
                  layout. Asynchronous FRP allows the programmer to specify when
                  the global ordering of event processing can be violated, and
                  thus enables efficient concurrent execution of FRP programs;
                  long-running computation can be executed asynchronously and not
                  adversely affect the responsiveness of the user interface.
                  Layout in Elm is achieved using a purely functional declarative
                  framework that makes it simple to create and combine text,
                  images, and video into rich multimedia displays. Together,
                  Elm’s two major features simplify the complicated task of
                  creating responsive and usable GUIs.},
  number = {6},
  journal = {ACM SIGPLAN Notices},
  author = {Czaplicki, Evan and Chong, Stephen},
  year = {2013},
  month = jun,
  pages = {411–422},
  language = {en},
}
 @misc{news/farewell-to-frp_2024,
  url = {
         https://web.archive.org/web/20241220190908/https://elm-lang.org/news/farewell-to-frp
         },
  author = {Czaplicki},
  title = {A Farewell to FRP},
  year = {2024},
  month = dec,
}

 @inproceedings{Sahay_Indamutsa_Di,
  address = {Portoroz, Slovenia},
  title = {Supporting the understanding and comparison of low-code development
           platforms},
  rights = {
            https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html
            },
  isbn = {9781728195322},
  url = {https://ieeexplore.ieee.org/document/9226356/},
  doi = {10.1109/SEAA51224.2020.00036},
  booktitle = {2020 46th Euromicro Conference on Software Engineering and
               Advanced Applications (SEAA)},
  publisher = {IEEE},
  author = {Sahay, Apurvanand and Indamutsa, Arsene and Di Ruscio, Davide and
            Pierantonio, Alfonso},
  year = {2020},
  month = aug,
  pages = {171–178},
}
 @book{Lieberman_2001,
  address = {San Francisco},
  series = {Morgan Kaufmann series in interactive technologies},
  title = {Your wish is my command: programming by example},
  ISBN = {9781558606883},
  callNumber = {QA76.6 .Y63 2001},
  publisher = {Morgan Kaufmann Publishers},
  year = {2001},
  collection = {Morgan Kaufmann series in interactive technologies},
}

@online{7GUIs-web,
  title = {7GUIs benchmark},
  url = {https://eugenkiss.github.io/7guis},
  urldate = {2024-04-11},
}

@misc{dark_update,
  url = {https://blog.darklang.com/an-overdue-status-update},
  author = {Stachu Korick},
  journal = {Darklang},
  year = {2024},
  month = mar,
  language = {en},
  urldate = {2024-04-23},
}

@online{fable,
  title = {Fable},
  url = {https://fable.io},
  urldate = {2024-04-29},
}
@online{fable-comp,
  title = {Fable compatibility},
  url = { https://fable.io/docs/javascript/compatibility.html},
  urldate = {2024-04-29},
}


@online{elm-arch,
  title = {Elm architecture},
  url = {https://guide.elm-lang.org/architecture},
  urldate = {2024-04-29},
}

@online{elm,
  title = {Elm},
  url = {https://elm-lang.org},
  urldate = {2024-04-29},
}

@online{darklang,
  title = {Darklang},
  url = {https://darklang.com},
  urldate = {2024-04-22},
}

@online{graphql,
  title = {GraphQL},
  url = {https://graphql.org},
  urldate = {2024-05-16},
}

@online{mendix,
  title = {Mendix},
  url = {https://www.mendix.com},
  urldate = {2024-05-16},
}
@online{fsharp,
  title = {F\#},
  url = {https://fsharp.org},
  urldate = {2024-06-11},
}
@online{feliz,
  title = {Feliz},
  url = {https://zaid-ajaj.github.io/Feliz},
  urldate = {2024-06-11},
}
@online{elmish,
  title = {Elmish},
  url = {https://elmish.github.io},
  urldate = {2024-06-11},
}
//TODO: FIX THE LINK
@online{tailwind,
  title = {Tailwind},
  url = {https://tailwindcss.com/},
  urldate = {2024-06-11},
}

@online{simpleJson,
  title = {Fable.SimpleJson},
  url = {https://github.com/Zaid-Ajaj/Fable.SimpleJson},
  urldate = {2024-06-11},
}

@online{thoth,
  title = {Thoth.Json},
  url = {https://thoth-org.github.io/Thoth.Json/},
  urldate = {2024-06-12},
}
@online{mocha,
  title = {Fable.Mocha},
  url = {https://github.com/Zaid-Ajaj/Fable.Mocha},
  urldate = {2024-06-14},
}

@online{react,
  title = {React},
  url = {https://react.dev/},
  urldate = {2024-04-03},
}

@online{vuejs,
  title = {Vue.js},
  url = {https://vuejs.org/},
  urldate = {2024-04-03},
}

@online{wordpress,
  title = {Wordpress},
  url = {https://wordpress.com/},
  urldate = {2024-04-03},
}

@online{safestack,
  title = {SAFE stack},
  url = {https://safe-stack.github.io/},
  urldate = {2024-04-03},
}

@online{codemirror,
  title = {CodeMirror},
  url = {https://codemirror.net/},
  urldate = {2024-06-23},
}
@inproceedings{Elliott_Hudak_1997,
  address = {New York, NY, USA},
  series = {ICFP ’97},
  title = {Functional reactive animation},
  ISBN = {9780897919180},
  url = {https://doi.org/10.1145/258948.258973},
  DOI = {10.1145/258948.258973},
  abstractNote = {Fran (Functional Reactive Animation) is a collection of data
                  types and functions for composing richly interactive,
                  multimedia animations. The key ideas in Fran are its notions of
                  behaviors and events. Behaviors are time-varying, reactive
                  values, while events are sets of arbitrarily complex conditions
                  , carrying possibly rich information. Most traditional values
                  can be treated as behaviors, and when images are thus treated,
                  they become animations. Although these notions are captured as
                  data types rather than a programming language, we provide them
                  with a denotational semantics, including a proper treatment of
                  real time, to guide reasoning and implementation. A method to
                  effectively and efficiently perform event detection using
                  interval analysis is also described, which relies on the
                  partial information structure on the domain of event times.
                  Fran has been implemented in Hugs, yielding surprisingly good
                  performance for an interpreter-based system. Several examples
                  are given, including the ability to describe physical phenomena
                  involving gravity, springs, velocity, acceleration, etc. using
                  ordinary differential equations.},
  booktitle = {Proceedings of the second ACM SIGPLAN international conference on
               Functional programming},
  publisher = {Association for Computing Machinery},
  author = {Elliott, Conal and Hudak, Paul},
  year = {1997},
  month = aug,
  pages = {263–273},
  collection = {ICFP ’97},
}
@article{Yang_Gupta_Botev_Churchill_Levchenko_Shanmugasundaram_2008,
  title = {WYSIWYG development of data driven web applications},
  volume = {1},
  ISSN = {2150-8097},
  url = {https://doi.org/10.14778/1453856.1453879},
  DOI = {10.14778/1453856.1453879},
  abstractNote = {An emerging trend in Social Networking sites and Web portals
                  is the opening up of their APIs to external application
                  developers. For example, the Facebook Platform, Google Gadgets
                  and Yahoo! Widgets allow developers to design their own
                  applications, which can then can be integrated with the
                  platform and shared with other users. However, current APIs are
                  targeted towards developers with programming expertise and
                  database knowledge; they are not accessible to a large class of
                  users who do not have a programming/database background, but
                  would nevertheless like to create new applications. To address
                  this need, we have developed the AppForge system, which
                  provides a WYSIWYG application development platform. Users can
                  graphically specify the components of webpages inside a Web
                  browser, and the corresponding database schema and application
                  logic will be automatically generated on the fly by the system.
                  The WYSIWYG interface gives instantaneous feedback on what
                  users have created and allows them to run, test and
                  continuously refine their applications. AppForge has been used
                  to create prototype versions of a variety of applications such
                  as an event planning system, a recruiting system, an item
                  trading system and an online course management system. We have
                  also conducted a small and preliminary user study to identify
                  and fix some of the usability aspects of AppForge.},
  number = {1},
  journal = {Proceedings of the VLDB Endowment},
  author = {Yang, Fan and Gupta, Nitin and Botev, Chavdar and Churchill,
            Elizabeth F and Levchenko, George and Shanmugasundaram, Jayavel},
  year = {2008},
  month = aug,
  pages = {163–175},
}
 @misc{TodoMVC,
  title = {TodoMVC},
  url = {http://todomvc.com},
  abstractNote = {Helping you select an MV* framework - Todo apps for
                  Backbone.js, Ember.js, AngularJS and many more},
  language = {en},
  urldate = {2024-11-18},
}

@misc{rfc8259,
  series = {Request for Comments},
  number = 8259,
  howpublished = {RFC 8259},
  publisher = {RFC Editor},
  doi = {10.17487/RFC8259},
  url = {https://www.rfc-editor.org/info/rfc8259},
  author = {Tim Bray},
  title = {{The JavaScript Object Notation (JSON) Data Interchange Format}},
  pagetotal = 16,
  year = 2017,
  month = dec,
  abstract = {JavaScript Object Notation (JSON) is a lightweight, text-based,
              language-independent data interchange format. It was derived from
              the ECMAScript Programming Language Standard. JSON defines a small
              set of formatting rules for the portable representation of
              structured data. This document removes inconsistencies with other
              specifications of JSON, repairs specification errors, and offers
              experience-based interoperability guidance.},
}

 @book{Park_1992,
  address = {Fort Belvoir, VA},
  title = {Software Size Measurement: A Framework for Counting Source
           Statements:},
  url = {http://www.dtic.mil/docs/citations/ADA258304},
  DOI = {10.21236/ADA258304},
  institution = {Defense Technical Information Center},
  author = {Park, Robert E.},
  year = {1992},
  month = sep,
  language = {en},
}


 @online{7guis-React-TypeScript-MobX/src/app/guis/counter.tsx,
  title = {7GUIs Example counter implementation },
  url = {
         https://github.com/eugenkiss/7guis-React-TypeScript-MobX/blob/master/src/app/guis/counter.tsx
         },
  abstractNote = {Implementation of 7GUIs with React, TypeScript and MobX -
                  eugenkiss/7guis-React-TypeScript-MobX},
  journal = {GitHub},
  language = {en},
  urldate = {2024-06-23},
}

 @online{7guis-React-TypeScript-MobX/src/app/guis/tempconv.tsx,
  title = {7GUIs Example temperature converter implementation},
  url = {
         https://github.com/eugenkiss/7guis-React-TypeScript-MobX/blob/master/src/app/guis/tempconv.tsx
         },
  abstractNote = {Implementation of 7GUIs with React, TypeScript and MobX -
                  eugenkiss/7guis-React-TypeScript-MobX},
  journal = {GitHub},
  language = {en},
  urldate = {2024-06-23},
}
@online{Rider,
  title = {JetBrains Rider},
  url = {https://www.jetbrains.com/rider/},
  abstractNote = {Develop .NET, ASP.NET, .NET Core, Xamarin or Unity
                  applications on Windows, Mac, Linux},
  journal = {JetBrains},
  language = {en},
  urldate = {2024-11-23},
} 
 @online{copilot,
  title = {Github Copilot},
  url = {https://github.com/features/copilot},
  abstractNote = {GitHub Copilot works alongside you directly in your editor,
                  suggesting whole lines or entire functions for you.},
  journal = {GitHub},
  year = {2024},
  language = {en},
  urldate = {2024-11-23},
}
 @online{vscode,
  title = {Visual Studio Code},
  url = {https://code.visualstudio.com/},
  abstractNote = {Visual Studio Code redefines AI-powered coding with GitHub
                  Copilot for building and debugging modern web and cloud
                  applications. Visual Studio Code is free and available on your
                  favorite platform - Linux, macOS, and Windows.},
  language = {en},
  urldate = {2024-11-23},
}
 @online{hugo,
  title = {Hugo},
  url = {https://gohugo.io/},
  abstractNote = {The world’s fastest framework for building websites},
  language = {en},
}
@online{todo-spec,
  title = {TodoMVC app specification},
  url = {
         https://web.archive.org/web/20241119121445/https://github.com/tastejs/todomvc/blob/master/app-spec.md
         },
  year = {2024},
  month = nov,
  urldate = {2024-12-29},
}
